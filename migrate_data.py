import os
import streamlit as st
import firebase_admin
from firebase_admin import credentials, firestore
from langchain_community.document_loaders import PyPDFLoader
import google.generativeai as genai
from dotenv import load_dotenv
import pandas as pd
import json
import time

# ==============================================================================
# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Initial Setup) ---
# ==============================================================================

# 1. ‡πÇ‡∏´‡∏•‡∏î Environment Variables (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini API Key)
load_dotenv()

# 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API
try:
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å os.environ ‡πÅ‡∏ó‡∏ô
    api_key = os.environ.get("GOOGLE_API_KEY") 
    if not api_key:
        raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö GOOGLE_API_KEY ‡πÉ‡∏ô Secrets")
    genai.configure(api_key=api_key)
except Exception as e:
    st.error(f"üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API ‡πÑ‡∏î‡πâ: {e}")
    st.stop()

# 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase Admin SDK
import base64
try:
    if not firebase_admin._apps:
        # ‡∏≠‡πà‡∏≤‡∏ô Base64 string ‡∏à‡∏≤‡∏Å Secrets
        firebase_secret_b64 = os.environ.get("FIREBASE_SERVICE_ACCOUNT_BASE64")
        if not firebase_secret_b64:
            raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö FIREBASE_SERVICE_ACCOUNT_BASE64 ‡πÉ‡∏ô Secrets")
        
        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô dictionary
        decoded_secret = base64.b64decode(firebase_secret_b64)
        service_account_info = json.loads(decoded_secret)
        
        cred = credentials.Certificate(service_account_info)
        firebase_admin.initialize_app(cred)
    db = firestore.client()
except Exception as e:
    st.error(f"üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ: {e}")
    st.stop()

# ==============================================================================
# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Functions) ---
# ==============================================================================

def extract_metadata_with_function_calling(text_data: str) -> dict:
    """
    ‡πÉ‡∏ä‡πâ Gemini ‡πÅ‡∏•‡∏∞ Function Calling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏±‡∏î Metadata ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ PDF
    """
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Tool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏±‡∏î Metadata
    metadata_tool = genai.protos.Tool(
        function_declarations=[
            genai.protos.FunctionDeclaration(
                name='log_motor_metadata',
                description="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå",
                parameters=genai.protos.Schema(
                    type=genai.protos.Type.OBJECT,
                    properties={
                        'equipment_no': genai.protos.Schema(
                            type=genai.protos.Type.STRING,
                            description="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Equipment: ‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô '723P1201_1'"
                        ),
                        'test_timestamp': genai.protos.Schema(
                            type=genai.protos.Type.STRING,
                            description="‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYYMMDD-HH:MM:SS ‡πÄ‡∏ä‡πà‡∏ô '20250616-10:29:43'"
                        ),
                        'test_location': genai.protos.Schema(
                            type=genai.protos.Type.STRING,
                            description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 'Direct Test at Motor' ‡∏´‡∏£‡∏∑‡∏≠ 'At MCC'"
                        ),
                    },
                    required=['equipment_no', 'test_timestamp', 'test_location']
                )
            )
        ]
    )

    model = genai.GenerativeModel(
        model_name='gemini-1.5-flash-latest',
        tools=[metadata_tool]
    )
    
    prompt = f"""
    ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤:
    1. ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Equipment (‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'Equipment:') ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á file
    2. ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô YYYYMMDD-HH:MM:SS) ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î MCA ‡πÄ‡∏ä‡πà‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ Resistance
    3. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'Direct Test at Motor') ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Frequency ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Direct Test at Motor ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 'At MCC'

    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ 'log_motor_metadata'

    ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:
    ---
    {text_data}
    ---
    """
    
    response = model.generate_content(prompt)
    
    try:
        tool_call = response.candidates[0].content.parts[0].function_call
        if tool_call.name == 'log_motor_metadata':
            return tool_call.args
    except (IndexError, AttributeError, KeyError) as e:
        raise ValueError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î Metadata ‡πÑ‡∏î‡πâ: {e}")

    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö Metadata ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")

def get_analysis_from_data(input_data_text, manual_context, user_query):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏• ‡πÇ‡∏î‡∏¢‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Gemini ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
    """
    template = """
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "AIMCA" ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏• Motor Circuit Analyzer ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á
    ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î" ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å "‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠"
    ‡πÅ‡∏•‡∏∞ **‡∏ï‡πâ‡∏≠‡∏á** ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

    ---
    **[‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Context)]**
    {manual_context}
    ---
    **[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î (Input Data)] ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Resistance (Ohm), Impedance (Ohm), Inductance (mH), Phase Angle (¬∞) ‡∏°‡∏µ column ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô %unbalance**
    {input_data}
    ---
    **[‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á/‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Query)]**
    {user_query}
    ---

    **[‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (JSON Output Format)]**
    ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å JSON:
    {{
      "status": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏î‡∏Ñ‡∏≥‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏≤‡∏Å: [GOOD, WARNING, CRITICAL]",
      "overall_summary": "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (‡πÄ‡∏ä‡πà‡∏ô '‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á', '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥')",
      "detailed_analysis": "‡∏Ñ‡∏≥‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô bullet point ‡πÇ‡∏î‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏™‡πà‡∏á‡∏ú‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á",
      "recommendations": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
      "graph_data": [
        {{
          "parameter": "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ä‡πà‡∏ô 'Phase Imbalance (%)'",
          "measured_value": ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô),
          "standard_value_min": ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null),
          "standard_value_max": ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null)
        }},
        {{
          "parameter": "Resistance Imbalance (%)",
          "measured_value": 1.5,
          "standard_value_min": null,
          "standard_value_max": 5.0
        }}
      ]
    }}
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ Phase Imbalance ‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ 2.1% ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3% ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà "measured_value": 2.1, "standard_value_max": 3.0
    """
    prompt = template.format(
        manual_context=manual_context,
        input_data=input_data_text,
        user_query=user_query if user_query else "‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"
    )
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ Gemini ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
    generation_config = genai.types.GenerationConfig(
        response_mime_type="application/json"
    )
    
    model = genai.GenerativeModel('gemini-2.0-flash') #gemini-1.5-flash-latest
    response = model.generate_content(prompt, generation_config=generation_config)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON string ‡πÄ‡∏õ‡πá‡∏ô Python dictionary
    return json.loads(response.text)

def migrate_historic_data(root_folder: str, site_name: str):
    """
    ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase
    """
    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ã‡∏ï‡πå: {site_name}")
    
    for filename in os.listdir(root_folder):
        if filename.lower().endswith('.pdf'):
            file_path = os.path.join(root_folder, filename)
            print(f"\nüìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {filename}")
            
            try:
                # 1. ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö
                loader = PyPDFLoader(file_path)
                documents = loader.load()
                raw_text = "\n\n".join([doc.page_content for doc in documents])

                # 2. ‡∏™‡∏Å‡∏±‡∏î Metadata
                print("   - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏Å‡∏±‡∏î Metadata...")
                metadata = extract_metadata_with_function_calling(raw_text)
                equipment_no = metadata.get('equipment_no')
                # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
                test_date = pd.to_datetime(metadata.get('test_timestamp'), format='%Y%m%d-%H:%M:%S').strftime('%Y-%m-%dT%H:%M:%S')

                # 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
                print("   - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MCA...")
                # (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ vectorstore ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
                # relevant_docs = retriever.invoke(...) 
                # manual_context = "..."
                # ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ context ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡πá‡πÑ‡∏î‡πâ
                manual_context_placeholder = "‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå AC"
                analysis_result = get_analysis_from_data(raw_text, manual_context_placeholder, "")

                # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase
                print("   - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á Firebase...")
                doc_ref = db.collection('sites').document(site_name) \
                          .collection('motors').document(equipment_no) \
                          .collection('analyses').document(test_date)
                
                doc_data = {
                    'timestamp': pd.to_datetime(metadata.get('test_timestamp'), format='%Y%m%d-%H:%M:%S'),
                    'analysis_data': analysis_result,
                    'test_location': metadata.get('test_location'),
                    'original_filename': filename
                }
                doc_ref.set(doc_data)
                
                print(f"   ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {equipment_no} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {test_date} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                print("   ...‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Rate Limit...")
                time.sleep(15)

            except Exception as e:
                print(f"   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")

# ==============================================================================
# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å (Main Execution) ---
# ==============================================================================

if __name__ == "__main__":
    # --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô ---
    # ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏µ‡πâ
    # historic_data/
    # ‚îú‚îÄ‚îÄ SITE_A/
    # ‚îÇ   ‚îú‚îÄ‚îÄ report1.pdf
    # ‚îÇ   ‚îî‚îÄ‚îÄ report2.pdf
    # ‚îî‚îÄ‚îÄ SITE_B/
    #     ‚îî‚îÄ‚îÄ report3.pdf
    
    historic_root = "historic_data"
    sites_to_migrate = os.listdir(historic_root)

    for site in sites_to_migrate:
        site_folder_path = os.path.join(historic_root, site)
        if os.path.isdir(site_folder_path):
            migrate_historic_data(site_folder_path, site)

    print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")